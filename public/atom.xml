<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>建均笔记</title>
  
  <subtitle>不积跬步 无以至千里</subtitle>
  <link href="http://www.wujianjun.org/atom.xml" rel="self"/>
  
  <link href="http://www.wujianjun.org/"/>
  <updated>2021-09-28T10:43:29.187Z</updated>
  <id>http://www.wujianjun.org/</id>
  
  <author>
    <name>建均笔记</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Podman系列之通过Maven插件dockerfile-maven-plugin完成镜像打包</title>
    <link href="http://www.wujianjun.org/2021/09/28/podman-dockerfile-maven-plugin/"/>
    <id>http://www.wujianjun.org/2021/09/28/podman-dockerfile-maven-plugin/</id>
    <published>2021-09-28T10:35:30.000Z</published>
    <updated>2021-09-28T10:43:29.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pom中添加插件"><a href="#pom中添加插件" class="headerlink" title="pom中添加插件"></a>pom中添加插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.13&lt;/version&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">                &lt;goal&gt;push&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;repository&gt;myrepo.gpluslife.com/$&#123;project.artifactId&#125;&lt;/repository&gt;</span><br><span class="line">        &lt;tag&gt;$&#123;project.version&#125;&lt;/tag&gt;</span><br><span class="line">        &lt;useMavenSettingsForAuth&gt;true&lt;/useMavenSettingsForAuth&gt;</span><br><span class="line">        &lt;buildArgs&gt;</span><br><span class="line">            &lt;MODULE_FILE_NAME&gt;$&#123;project.build.finalName&#125;&lt;/MODULE_FILE_NAME&gt;</span><br><span class="line">        &lt;/buildArgs&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h2 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ clean package -U  -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>通过在Dockerfile文件所在目录执行以上命令成功后，则会自动在远程podman服务端创建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman images</span><br><span class="line">REPOSITORY                                     TAG                         IMAGE ID      CREATED         SIZE</span><br><span class="line">myrepo.gpluslife.com/service-gateway-biz       1.0.0-SNAPSHOT              aa26ce31b312  20 seconds ago  294 MB</span><br><span class="line">docker.io/library/nginx                        1.20.1                      3456bc6a1c48  3 weeks ago     137 MB</span><br><span class="line">docker.io/adoptopenjdk/openjdk8                x86_64-ubuntu-jre8u292-b10  48b3b187af57  5 weeks ago     229 MB</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>mvn package时抛错</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[INFO] I/O exception (java.io.IOException) caught when processing request to &#123;&#125;-&gt;unix://localhost:80: No such file or directory</span><br><span class="line">[INFO] Retrying request to &#123;&#125;-&gt;unix://localhost:80</span><br><span class="line">[INFO] I/O exception (java.io.IOException) caught when processing request to &#123;&#125;-&gt;unix://localhost:80: No such file or directory</span><br><span class="line">[INFO] Retrying request to &#123;&#125;-&gt;unix://localhost:80</span><br><span class="line">[INFO] I/O exception (java.io.IOException) caught when processing request to &#123;&#125;-&gt;unix://localhost:80: No such file or directory</span><br><span class="line">[INFO] Retrying request to &#123;&#125;-&gt;unix://localhost:80</span><br></pre></td></tr></table></figure><p>根因分析：由于未正确配置DOCKER_HOST环境变量导致走了本机默认的连接地址<br>解决方案：在环境变量上配置以下地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_HOST=&quot;tcp://host:2375&quot;</span><br></pre></td></tr></table></figure><p>附插件官网地址： <a href="https://github.com/spotify/dockerfile-maven">https://github.com/spotify/dockerfile-maven</a></p><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pom中添加插件&quot;&gt;&lt;a href=&quot;#pom中添加插件&quot; class=&quot;headerlink&quot; title=&quot;pom中添加插件&quot;&gt;&lt;/a&gt;pom中添加插件&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="podman" scheme="http://www.wujianjun.org/tags/podman/"/>
    
  </entry>
  
  <entry>
    <title>Podman系列之通过docker插件完成研发机镜像创建和运行</title>
    <link href="http://www.wujianjun.org/2021/09/27/podman-ideaj-docker-plugin/"/>
    <id>http://www.wujianjun.org/2021/09/27/podman-ideaj-docker-plugin/</id>
    <published>2021-09-27T05:51:42.000Z</published>
    <updated>2021-09-28T10:36:47.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MacOS连接Linux的Podman-REST-API-service"><a href="#MacOS连接Linux的Podman-REST-API-service" class="headerlink" title="MacOS连接Linux的Podman REST API service"></a>MacOS连接Linux的Podman REST API service</h2><p>由于Podman与Docker一样，不支持在windows和macos上运行。故可以通过在linux系统下的podman开启REST API service。由windows与macos进行远程连接。</p><ol><li><p>Linux下开启Podman REST API service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman system service -t 0 tcp:0.0.0.0:2375 &amp;</span><br><span class="line">wujianjun@wujianjun-work:~$ podman --remote info</span><br><span class="line">host:</span><br><span class="line">  arch: amd64</span><br><span class="line">  buildahVersion: 1.22.3</span><br><span class="line">  cgroupControllers: []</span><br><span class="line">  cgroupManager: cgroupfs</span><br><span class="line">  cgroupVersion: v1</span><br><span class="line">wujianjun@wujianjun-work:~$ podman system connection list <span class="comment">#查看当前机器远程连接的列表</span></span><br></pre></td></tr></table></figure><p>接下来MacOS或Windows就可以通过tcp://host:2375进行连接了</p></li><li><p>通过Ideaj下Docker Plug-in完成远程连接</p></li></ol><p><img src="/images/docker-plugin-remote-connect.png" alt="Docker插件远程连接"></p><h2 id="程序打包"><a href="#程序打包" class="headerlink" title="程序打包"></a>程序打包</h2><ol><li><p>在需要打包的模块pom.xml的同级目录创建 <strong>Dockerfile</strong> 文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM adoptopenjdk/openjdk8:x86_64-ubuntu-jre8u292-b10</span><br><span class="line">ARG MODULE_FILE_NAME</span><br><span class="line">ADD target/$&#123;MODULE_FILE_NAME&#125;.tar.gz /opt/</span><br><span class="line">ENV TZ=Asia/Shanghai MODULE_FILE_NAME=$&#123;MODULE_FILE_NAME&#125;</span><br><span class="line">CMD cd /opt/$&#123;MODULE_FILE_NAME&#125; &amp;&amp; ./bin/app restart &amp;&amp; tail -f ./logs/console.log</span><br></pre></td></tr></table></figure></li><li><p>在上一步的Docker远程连接下配置打包镜像</p></li></ol><p><img src="/images/docker-plugin-image-configuration.png" alt="Docker远程连接"></p><p><code>注意</code>：如果Dockerfile里出现错误（如Add的文件不存在时）会抛出<code>Dockerfile: service-gateway-biz/Dockerfile&#39;: Can&#39;t retrieve image ID from build stream</code>的错误。</p><p><img src="/images/docker-plugin-notice.png" alt="Docker插件使用"></p><p><img src="/images/podman-images.png" alt="Podman远程仓库镜像"></p><p>通过登录进Podman仓库来看，两边的镜像与运行容器实例是一致的。</p><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MacOS连接Linux的Podman-REST-API-service&quot;&gt;&lt;a href=&quot;#MacOS连接Linux的Podman-REST-API-service&quot; class=&quot;headerlink&quot; title=&quot;MacOS连接Linux的Podman </summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="Podman" scheme="http://www.wujianjun.org/tags/Podman/"/>
    
  </entry>
  
  <entry>
    <title>Podman系列之Nexus3私服搭建与使用</title>
    <link href="http://www.wujianjun.org/2021/09/27/podman-private-svr/"/>
    <id>http://www.wujianjun.org/2021/09/27/podman-private-svr/</id>
    <published>2021-09-27T03:42:20.000Z</published>
    <updated>2021-09-28T08:26:16.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nexus新建docker仓库"><a href="#Nexus新建docker仓库" class="headerlink" title="Nexus新建docker仓库"></a>Nexus新建docker仓库</h2><p>Nexus的仓库分三类</p><ol><li>docker（proxy）：用于代理其它的hub，类似mirror。</li><li>docker（hosted）：用于上传本地镜像到仓库。</li><li>docker（group）：可将proxy类型和hosted类型的仓库对外统一访问入口（注意不能使用这个地址进行镜像的上传）。</li></ol><p>以下为我的配置：</p><p><code>docker（proxy）</code><br><img src="/images/docker-proxy.png" alt="proxy"></p><p><code>docker（hosted）</code><br><img src="/images/docker-hosted.png" alt="hosted"></p><p><code>docker（group）</code><br><img src="/images/docker-group.png" alt="group"></p><p><code>配置权限</code><br><img src="/images/docker-realms.png" alt="realms"></p><h2 id="podman客户端配置"><a href="#podman客户端配置" class="headerlink" title="podman客户端配置"></a>podman客户端配置</h2><ol><li>注册私服</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ vi /etc/containers/registries.conf</span><br><span class="line">`</span><br><span class="line">unqualified-search-registries = [<span class="string">&quot;docker.io&quot;</span>, <span class="string">&quot;quay.io&quot;</span>]</span><br><span class="line"><span class="comment">#更改docker.io镜像加速器为私服统一访问地址</span></span><br><span class="line">[[registry]]</span><br><span class="line">prefix = <span class="string">&quot;docker.io&quot;</span></span><br><span class="line">location = <span class="string">&quot;10.84.102.90:7791&quot;</span></span><br><span class="line">insecure = <span class="literal">true</span></span><br><span class="line"><span class="comment">#更改quay.io镜像加速器为私服统一访问地址</span></span><br><span class="line">[[registry]]</span><br><span class="line">prefix = <span class="string">&quot;quay.io&quot;</span></span><br><span class="line">location = <span class="string">&quot;10.84.102.90:7791&quot;</span></span><br><span class="line">insecure = <span class="literal">true</span></span><br><span class="line"><span class="comment">#注册group访问地址</span></span><br><span class="line">[[registry]]</span><br><span class="line">prefix = <span class="string">&quot;10.84.102.90:7791&quot;</span></span><br><span class="line">location = <span class="string">&quot;10.84.102.90:7791&quot;</span></span><br><span class="line">insecure = <span class="literal">true</span></span><br><span class="line"><span class="comment">#注册hosted上传地址</span></span><br><span class="line">[[registry]]</span><br><span class="line">prefix = <span class="string">&quot;10.84.102.90:7792&quot;</span></span><br><span class="line">location = <span class="string">&quot;10.84.102.90:7792&quot;</span></span><br><span class="line">insecure = <span class="literal">true</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>注意：<code>insecure</code>设置为true，表示支持http访问</p><ol start="2"><li>重新加载</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ sudo systemctl daemon-reload</span><br><span class="line">wujianjun@wujianjun-work:~$ sudo systemctl restart podman</span><br></pre></td></tr></table></figure><h2 id="测试生效"><a href="#测试生效" class="headerlink" title="测试生效"></a>测试生效</h2><p>接下来以redis镜像来演示效果<br><img src="/images/docker-images-redis.png" alt="docker-images-redis"></p><ol><li>拉取镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman pull redis:latest</span><br><span class="line">Resolved <span class="string">&quot;redis&quot;</span> as an <span class="built_in">alias</span> (/home/wujianjun/.cache/containers/short-name-aliases.conf)</span><br><span class="line">Trying to pull docker.io/library/redis:latest...</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob a330b6cecb98 skipped: already exists  </span><br><span class="line">Copying blob 4f9efe5b47a5 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 6af3a5ca4596 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 14bfbab96d75 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 8b3e2d14a955 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 5da5e1b21a2f <span class="keyword">done</span>  </span><br><span class="line">Copying config 02c7f20544 <span class="keyword">done</span>  </span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">02c7f2054405dadaf295fac7281034e998646996e9768e65a78f90af62218be3</span><br></pre></td></tr></table></figure><p>此时再去私服上可以看到镜像已被镜像到私服上了</p><ol start="2"><li>推送到私服</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman tag redis 10.84.102.90:7792/library/myredis:1.0.0</span><br><span class="line">wujianjun@wujianjun-work:~$ podman push 10.84.102.90:7792/library/myredis:1.0.0</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob be5818ef2907 <span class="keyword">done</span>  </span><br><span class="line">Copying blob c54e0c16ea22 <span class="keyword">done</span>  </span><br><span class="line">Copying blob bdad86443e47 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 6a7992ac4800 <span class="keyword">done</span>  </span><br><span class="line">Copying blob be43d2475cf8 <span class="keyword">done</span>  </span><br><span class="line">Copying blob d000633a5681 <span class="keyword">done</span>  </span><br><span class="line">Copying config 02c7f20544 <span class="keyword">done</span>  </span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><p>注意：这里要通过7792的docker-hosted上传地址进行自有镜像的上传。<code>library</code>是指镜像的basePath（这里与docker.io/的镜像保持统一便于直接拉于自上传的镜像）<br>此时再去私服上可以看到myredis镜像已经可以查看到了。</p><ol start="3"><li>从私服拉取</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman pull myredis:1.0.0</span><br><span class="line">✔ docker.io/library/myredis:1.0.0</span><br><span class="line">Trying to pull docker.io/library/myredis:1.0.0...</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob dec078b46822 skipped: already exists  </span><br><span class="line">Copying blob c10395c8d924 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 3c4c5d2db949 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 6f8bb7da49ba <span class="keyword">done</span>  </span><br><span class="line">Copying blob 64906f58d083 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 991f02c53ad6 <span class="keyword">done</span>  </span><br><span class="line">Copying config 02c7f20544 <span class="keyword">done</span>  </span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">02c7f2054405dadaf295fac7281034e998646996e9768e65a78f90af62218be3</span><br><span class="line">wujianjun@wujianjun-work:~$ podman images</span><br><span class="line">REPOSITORY                      TAG         IMAGE ID      CREATED      SIZE</span><br><span class="line">docker.io/library/myredis       1.0.0       02c7f2054405  3 weeks ago  109 MB</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>未登录私服</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman pull redis:latest</span><br><span class="line">Resolved <span class="string">&quot;redis&quot;</span> as an <span class="built_in">alias</span> (/home/wujianjun/.cache/containers/short-name-aliases.conf)</span><br><span class="line">Trying to pull docker.io/library/redis:latest...</span><br><span class="line">Error: initializing <span class="built_in">source</span> docker://redis:latest: Requesting bear token: invalid status code from registry 403 (Forbidden)</span><br><span class="line">wujianjun@wujianjun-work:~$ podman login 10.84.102.90:7791</span><br><span class="line">Username: de^Cwujianjun@wujianjun-work:~$ podman login -u developer 10.84.102.90:7791</span><br><span class="line">Password:</span><br><span class="line">Login Succeeded!</span><br><span class="line">wujianjun@wujianjun-work:~$ podman pull redis:latest</span><br><span class="line">Resolved <span class="string">&quot;redis&quot;</span> as an <span class="built_in">alias</span> (/home/wujianjun/.cache/containers/short-name-aliases.conf)</span><br><span class="line">Trying to pull docker.io/library/redis:latest...</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob a330b6cecb98 skipped: already exists  </span><br><span class="line">Copying blob 4f9efe5b47a5 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 6af3a5ca4596 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 14bfbab96d75 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 8b3e2d14a955 <span class="keyword">done</span>  </span><br><span class="line">Copying blob 5da5e1b21a2f <span class="keyword">done</span>  </span><br><span class="line">Copying config 02c7f20544 <span class="keyword">done</span>  </span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">02c7f2054405dadaf295fac7281034e998646996e9768e65a78f90af62218be3</span><br><span class="line">wujianjun@wujianjun-work:~$</span><br><span class="line">wujianjun@wujianjun-work:~$ podman images</span><br><span class="line">REPOSITORY                      TAG         IMAGE ID      CREATED      SIZE</span><br><span class="line">docker.io/library/redis         latest      02c7f2054405  3 weeks ago  109 MB</span><br></pre></td></tr></table></figure><p>根因分析：由于未登录私服故返回403的错误，已登录的信息会保存在<code>/run/user/1000/containers/auth.json</code>文件中</p></li><li><p>tag没有对应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman pull myredis:v1.0.0</span><br><span class="line">✔ docker.io/library/myredis:v1.0.0</span><br><span class="line">Trying to pull docker.io/library/myredis:v1.0.0...</span><br><span class="line">Error: initializing <span class="built_in">source</span> docker://myredis:v1.0.0: reading manifest v1.0.0 <span class="keyword">in</span> 10.84.102.90:7791/library/myredis: manifest unknown: manifest unknown</span><br></pre></td></tr></table></figure><p>根因分析：由于tag为v1.0.0的myredis镜像没有找到</p></li><li><p>未开启http访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman pull myredis:1.0.0</span><br><span class="line">✔ docker.io/library/myredis:v1.0.0</span><br><span class="line">Trying to pull docker.io/library/myredis:1.0.0...</span><br><span class="line">  Get https://10.84.102.90:7791/v2/: http: server gave HTTP response to HTTPS client</span><br><span class="line">Error: error pulling image <span class="string">&quot;10.84.102.90:7791/library/myredis&quot;</span>: unable to pull 10.84.102.90:7791/library/myredis: unable to pull image: Error initializing <span class="built_in">source</span> docker://10.84.102.90:7791/library/myredis:1.0.0: error pinging docker registry 10.84.102.90:7791: Get https://10.84.102.90:7791/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p>根因分析：由于在注册私服地址时没有开启<code>insecure = true</code></p></li></ol><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Nexus新建docker仓库&quot;&gt;&lt;a href=&quot;#Nexus新建docker仓库&quot; class=&quot;headerlink&quot; title=&quot;Nexus新建docker仓库&quot;&gt;&lt;/a&gt;Nexus新建docker仓库&lt;/h2&gt;&lt;p&gt;Nexus的仓库分三类&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="Podman" scheme="http://www.wujianjun.org/tags/Podman/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Stream之实例玩转集合的筛选、归约、分组、聚合</title>
    <link href="http://www.wujianjun.org/2021/09/18/java8-stream/"/>
    <id>http://www.wujianjun.org/2021/09/18/java8-stream/</id>
    <published>2021-09-18T03:11:57.000Z</published>
    <updated>2021-09-18T05:19:58.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="功能全景"><a href="#功能全景" class="headerlink" title="功能全景"></a>功能全景</h2><p><img src="/images/java-stream-1.png" alt="Java8Stream全景"></p><h2 id="Stream概述"><a href="#Stream概述" class="headerlink" title="Stream概述"></a>Stream概述</h2><p>Java 8 是一个非常成功的版本，这个版本新增的<code>Stream</code>，配合同版本出现的 <code>Lambda</code> ，给我们操作集合（Collection）提供了极大的便利。</p><p>那么什么是<code>Stream</code>？</p><blockquote><p>Stream将要处理的元素集合看作一种流，在流的过程中，借助Stream API对流中的元素进行操作，比如：筛选、排序、聚合等。</p></blockquote><p>Stream可以由数组或集合创建，对流的操作分为两种：</p><ol><li>中间操作，每次返回一个新的流，可以有多个。</li><li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li></ol><p>另外，Stream有几个特性：</p><ol><li>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</li><li>stream不会改变数据源，通常情况下会产生一个新的集合或一个值。</li><li>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li></ol><h2 id="Stream的创建"><a href="#Stream的创建" class="headerlink" title="Stream的创建"></a>Stream的创建</h2><h3 id="Stream可以通过集合数组创建。"><a href="#Stream可以通过集合数组创建。" class="headerlink" title="Stream可以通过集合数组创建。"></a>Stream可以通过集合数组创建。</h3><ol><li>通过 java.util.Collection.stream()方法用集合创建流</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class="line">// 创建一个顺序流</span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">// 创建一个并行流</span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br></pre></td></tr></table></figure><ol start="2"><li>使用java.util.Arrays.stream(T[] array)方法用数组创建流</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] array=&#123;1,3,5,6,8&#125;;</span><br><span class="line">IntStream stream = Arrays.stream(array);</span><br></pre></td></tr></table></figure><ol start="3"><li>使用Stream的静态方法：of()、iterate()、generate()</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(1, 2, 3, 4, 5, 6);</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.iterate(0, (x) -&gt; x + 3).limit(4);</span><br><span class="line">stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(3);</span><br><span class="line">stream3.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>stream和parallelStream的简单区分</strong></p><p>stream是顺序流，由主线程按顺序对流执行操作。</p><p>parallelStream是并行流，内部以多线程并行执行的方式对流进行操作，但前提是流中的数据处理没有顺序要求。例如筛选集合中的奇数，两者的处理不同之处：</p><p><img src="/images/java-stream-2.png" alt="stream和parallelStream"></p><p>如果流中的数据量足够大，并行流可以加快处速度。</p><p>除了直接创建并行流，还可以通过parallel()把顺序流转换成并行流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; findFirst = list.stream().parallel().filter(x-&gt;x&gt;6).findFirst();</span><br></pre></td></tr></table></figure><h2 id="Stream的使用"><a href="#Stream的使用" class="headerlink" title="Stream的使用"></a>Stream的使用</h2><p>在使用stream之前，先理解一个概念：Optional。</p><blockquote><p>Optional类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。 更详细说明请见：菜鸟教程Java 8 Optional类</p></blockquote><p>案例使用的员工类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Anni&quot;, 8200, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Owen&quot;, 9500, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Alisa&quot;, 7900, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    private String name;  // 姓名</span><br><span class="line">    private int salary; // 薪资</span><br><span class="line">    private int age; // 年龄</span><br><span class="line">    private String sex; //性别</span><br><span class="line">    private String area;  // 地区</span><br><span class="line"></span><br><span class="line">    // 构造方法</span><br><span class="line">    public Person(String name, int salary, int age,String sex,String area) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.salary = salary;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">        this.area = area;</span><br><span class="line">    &#125;</span><br><span class="line">    // 省略了get和set，请自行添加</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历-匹配（foreach-find-match）"><a href="#遍历-匹配（foreach-find-match）" class="headerlink" title="遍历/匹配（foreach/find/match）"></a>遍历/匹配（foreach/find/match）</h3><p>Stream也是支持类似集合的遍历和匹配元素的，只是Stream中的元素是以Optional类型存在的。Stream的遍历、匹配非常简单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// import已省略，请自行添加，后面代码亦是</span><br><span class="line">public class StreamTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 3, 8, 2, 1);</span><br><span class="line"></span><br><span class="line">        // 遍历输出符合条件的元素</span><br><span class="line">        list.stream().filter(x -&gt; x &gt; 6).forEach(System.out::println);</span><br><span class="line">        // 匹配第一个</span><br><span class="line">        Optional&lt;Integer&gt; findFirst = list.stream().filter(x -&gt; x &gt; 6).findFirst();</span><br><span class="line">        // 匹配任意（适用于并行流）</span><br><span class="line">        Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; 6).findAny();</span><br><span class="line">        // 是否包含符合特定条件的元素</span><br><span class="line">        boolean anyMatch = list.stream().anyMatch(x -&gt; x &lt; 6);</span><br><span class="line">        System.out.println(&quot;匹配第一个值：&quot; + findFirst.get());</span><br><span class="line">        System.out.println(&quot;匹配任意一个值：&quot; + findAny.get());</span><br><span class="line">        System.out.println(&quot;是否存在大于6的值：&quot; + anyMatch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筛选（filter）"><a href="#筛选（filter）" class="headerlink" title="筛选（filter）"></a>筛选（filter）</h3><p>筛选，是按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p><ul><li><p>案例一：筛选出Integer集合中大于7的元素，并打印出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(6, 7, 3, 8, 1, 2, 9);</span><br><span class="line">        Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">        stream.filter(x -&gt; x &gt; 7).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>8 9</p></blockquote></li><li><p>案例二： 筛选员工中工资高于8000的人，并形成新的集合。 形成新集合依赖collect（收集），后文有详细介绍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">        personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Owen&quot;, 9500, 25, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">        personList.add(new Person(&quot;Alisa&quot;, 7900, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; fiterList = personList.stream().filter(x -&gt; x.getSalary() &gt; 8000).map(Person::getName)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.print(&quot;高于8000的员工姓名：&quot; + fiterList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>高于8000的员工姓名：[Tom, Anni, Owen]</p></blockquote></li></ul><h3 id="聚合（max-min-count"><a href="#聚合（max-min-count" class="headerlink" title="聚合（max/min/count)"></a>聚合（max/min/count)</h3><p>max、min、count这些字眼你一定不陌生，没错，在mysql中我们常用它们进行数据统计。Java stream中也引入了这些概念和用法，极大地方便了我们对集合、数组的数据统计工作。</p><ul><li><p>案例一：获取String集合中最长的元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(&quot;adnm&quot;, &quot;admmt&quot;, &quot;pot&quot;, &quot;xbangd&quot;, &quot;weoujgsd&quot;);</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; max = list.stream().max(Comparator.comparing(String::length));</span><br><span class="line">System.out.println(&quot;最长的字符串：&quot; + max.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>最长的字符串：weoujgsd</p></blockquote></li><li><p>案例二：获取Integer集合中的最大值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 4, 11, 6);</span><br><span class="line"></span><br><span class="line">// 自然排序</span><br><span class="line">Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line">// 自定义排序</span><br><span class="line">Optional&lt;Integer&gt; max2 = list.stream().max(new Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">return o1.compareTo(o2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(&quot;自然排序的最大值：&quot; + max.get());</span><br><span class="line">System.out.println(&quot;自定义排序的最大值：&quot; + max2.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>自然排序的最大值：11</p><p>自定义排序的最大值：11</p></blockquote></li><li><p>案例三：获取员工工资最高的人。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Owen&quot;, 9500, 25, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Alisa&quot;, 7900, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line"></span><br><span class="line">Optional&lt;Person&gt; max = personList.stream().max(Comparator.comparingInt(Person::getSalary));</span><br><span class="line">System.out.println(&quot;员工工资最大值：&quot; + max.get().getSalary());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>员工工资最大值：9500</p></blockquote></li><li><p>案例四：计算Integer集合中大于6的元素的个数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(7, 6, 4, 8, 2, 11, 9);</span><br><span class="line"></span><br><span class="line">long count = list.stream().filter(x -&gt; x &gt; 6).count();</span><br><span class="line">System.out.println(&quot;list中大于6的元素个数：&quot; + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>list中大于6的元素个数：4</p></blockquote></li></ul><h3 id="映射-map-flatMap"><a href="#映射-map-flatMap" class="headerlink" title="映射(map/flatMap)"></a>映射(map/flatMap)</h3><p>映射，可以将一个流的元素按照一定的映射规则映射到另一个流中。分为map和flatMap：</p><ol><li>map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li><li>flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</li></ol><ul><li><p>案例一：英文字符串数组的元素全部改为大写。整数数组每个元素+3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String[] strArr = &#123; &quot;abcd&quot;, &quot;bcdd&quot;, &quot;defde&quot;, &quot;fTr&quot; &#125;;</span><br><span class="line">List&lt;String&gt; strList = Arrays.stream(strArr).map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; intList = Arrays.asList(1, 3, 5, 7, 9, 11);</span><br><span class="line">List&lt;Integer&gt; intListNew = intList.stream().map(x -&gt; x + 3).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;每个元素大写：&quot; + strList);</span><br><span class="line">System.out.println(&quot;每个元素+3：&quot; + intListNew);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>每个元素大写：[ABCD, BCDD, DEFDE, FTR]</p><p>每个元素+3：[4, 6, 8, 10, 12, 14]</p></blockquote></li><li><p>案例二：将员工的薪资全部增加1000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Owen&quot;, 9500, 25, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Alisa&quot;, 7900, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line"></span><br><span class="line">// 不改变原来员工集合的方式</span><br><span class="line">List&lt;Person&gt; personListNew = personList.stream().map(person -&gt; &#123;</span><br><span class="line">Person personNew = new Person(person.getName(), 0, 0, null, null);</span><br><span class="line">personNew.setSalary(person.getSalary() + 10000);</span><br><span class="line">return personNew;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line">System.out.println(&quot;一次改动前：&quot; + personList.get(0).getName() + &quot;--&gt;&quot; + personList.get(0).getSalary());</span><br><span class="line">System.out.println(&quot;一次改动后：&quot; + personListNew.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());</span><br><span class="line"></span><br><span class="line">// 改变原来员工集合的方式</span><br><span class="line">List&lt;Person&gt; personListNew2 = personList.stream().map(person -&gt; &#123;</span><br><span class="line">person.setSalary(person.getSalary() + 10000);</span><br><span class="line">return person;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line">System.out.println(&quot;二次改动前：&quot; + personList.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());</span><br><span class="line">System.out.println(&quot;二次改动后：&quot; + personListNew2.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>一次改动前：Tom–&gt;8900</p><p>一次改动后：Tom–&gt;18900</p><p>二次改动前：Tom–&gt;18900</p><p>二次改动后：Tom–&gt;18900</p></blockquote></li><li><p>案例三：将两个字符数组合并成一个新的字符数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(&quot;m,k,l,a&quot;, &quot;1,3,5,7&quot;);</span><br><span class="line">List&lt;String&gt; listNew = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line">// 将每个元素转换成一个stream</span><br><span class="line">String[] split = s.split(&quot;,&quot;);</span><br><span class="line">Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">return s2;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;处理前的集合：&quot; + list);</span><br><span class="line">System.out.println(&quot;处理后的集合：&quot; + listNew);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>处理前的集合：[m-k-l-a, 1-3-5]</p><p>处理后的集合：[m, k, l, a, 1, 3, 5]</p></blockquote></li></ul><h3 id="归约-reduce"><a href="#归约-reduce" class="headerlink" title="归约(reduce)"></a>归约(reduce)</h3><p>归约，也称缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。</p><ul><li><p>案例一：求Integer集合的元素之和、乘积和最大值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(1, 3, 2, 8, 11, 4);</span><br><span class="line">// 求和方式1</span><br><span class="line">Optional&lt;Integer&gt; sum = list.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">// 求和方式2</span><br><span class="line">Optional&lt;Integer&gt; sum2 = list.stream().reduce(Integer::sum);</span><br><span class="line">// 求和方式3</span><br><span class="line">Integer sum3 = list.stream().reduce(0, Integer::sum);</span><br><span class="line"></span><br><span class="line">// 求乘积</span><br><span class="line">Optional&lt;Integer&gt; product = list.stream().reduce((x, y) -&gt; x * y);</span><br><span class="line"></span><br><span class="line">// 求最大值方式1</span><br><span class="line">Optional&lt;Integer&gt; max = list.stream().reduce((x, y) -&gt; x &gt; y ? x : y);</span><br><span class="line">// 求最大值写法2</span><br><span class="line">Integer max2 = list.stream().reduce(1, Integer::max);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;list求和：&quot; + sum.get() + &quot;,&quot; + sum2.get() + &quot;,&quot; + sum3);</span><br><span class="line">System.out.println(&quot;list求积：&quot; + product.get());</span><br><span class="line">System.out.println(&quot;list求和：&quot; + max.get() + &quot;,&quot; + max2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>list求和：29,29,29</p><p>list求积：2112</p><p>list求和：11,11</p></blockquote></li><li><p>案例二：求所有员工的工资之和和最高工资。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Owen&quot;, 9500, 25, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Alisa&quot;, 7900, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line"></span><br><span class="line">// 求工资之和方式1：</span><br><span class="line">Optional&lt;Integer&gt; sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line">// 求工资之和方式2：</span><br><span class="line">Integer sumSalary2 = personList.stream().reduce(0, (sum, p) -&gt; sum += p.getSalary(),</span><br><span class="line">(sum1, sum2) -&gt; sum1 + sum2);</span><br><span class="line">// 求工资之和方式3：</span><br><span class="line">Integer sumSalary3 = personList.stream().reduce(0, (sum, p) -&gt; sum += p.getSalary(), Integer::sum);</span><br><span class="line"></span><br><span class="line">// 求最高工资方式1：</span><br><span class="line">Integer maxSalary = personList.stream().reduce(0, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(),</span><br><span class="line">Integer::max);</span><br><span class="line">// 求最高工资方式2：</span><br><span class="line">Integer maxSalary2 = personList.stream().reduce(0, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(),</span><br><span class="line">(max1, max2) -&gt; max1 &gt; max2 ? max1 : max2);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;工资之和：&quot; + sumSalary.get() + &quot;,&quot; + sumSalary2 + &quot;,&quot; + sumSalary3);</span><br><span class="line">System.out.println(&quot;最高工资：&quot; + maxSalary + &quot;,&quot; + maxSalary2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>工资之和：49300,49300,49300</p><p>最高工资：9500,9500</p></blockquote></li></ul><h3 id="收集-collect"><a href="#收集-collect" class="headerlink" title="收集(collect)"></a>收集(collect)</h3><p>collect，收集，可以说是内容最繁多、功能最丰富的部分了。从字面上去理解，就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合。</p><blockquote><p>collect主要依赖java.util.stream.Collectors类内置的静态方法。</p></blockquote><h4 id="归集-toList-toSet-toMap"><a href="#归集-toList-toSet-toMap" class="headerlink" title="归集(toList/toSet/toMap)"></a>归集(toList/toSet/toMap)</h4><p>因为流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里。toList、toSet和toMap比较常用，另外还有toCollection、toConcurrentMap等复杂一些的用法。</p><p>下面用一个案例演示toList、toSet和toMap：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(1, 6, 3, 4, 6, 7, 9, 6, 20);</span><br><span class="line">List&lt;Integer&gt; listNew = list.stream().filter(x -&gt; x % 2 == 0).collect(Collectors.toList());</span><br><span class="line">Set&lt;Integer&gt; set = list.stream().filter(x -&gt; x % 2 == 0).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line"></span><br><span class="line">Map&lt;?, Person&gt; map = personList.stream().filter(p -&gt; p.getSalary() &gt; 8000)</span><br><span class="line">.collect(Collectors.toMap(Person::getName, p -&gt; p));</span><br><span class="line">System.out.println(&quot;toList:&quot; + listNew);</span><br><span class="line">System.out.println(&quot;toSet:&quot; + set);</span><br><span class="line">System.out.println(&quot;toMap:&quot; + map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>toList：[6, 4, 6, 6, 20]</p><p>toSet：[4, 20, 6]</p><p>toMap：{Tom=mutest.Person@5fd0d5ae, Anni=mutest.Person@2d98a335}</p></blockquote><h4 id="统计-count-averaging"><a href="#统计-count-averaging" class="headerlink" title="统计(count/averaging)"></a>统计(count/averaging)</h4><p>Collectors提供了一系列用于数据统计的静态方法：</p><ol><li>计数：count</li><li>平均值：averagingInt、averagingLong、averagingDouble</li><li>最值：maxBy、minBy</li><li>求和：summingInt、summingLong、summingDouble</li><li>统计以上所有：summarizingInt、summarizingLong、summarizingDouble</li></ol><p>案例：统计员工人数、平均工资、工资总额、最高工资。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line"></span><br><span class="line">// 求总数</span><br><span class="line">Long count = personList.stream().collect(Collectors.counting());</span><br><span class="line">// 求平均工资</span><br><span class="line">Double average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));</span><br><span class="line">// 求最高工资</span><br><span class="line">Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));</span><br><span class="line">// 求工资之和</span><br><span class="line">Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class="line">// 一次性统计所有信息</span><br><span class="line">DoubleSummaryStatistics collect = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;员工总数：&quot; + count);</span><br><span class="line">System.out.println(&quot;员工平均工资：&quot; + average);</span><br><span class="line">System.out.println(&quot;员工工资总和：&quot; + sum);</span><br><span class="line">System.out.println(&quot;员工工资所有统计：&quot; + collect);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>员工总数：3</p><p>员工平均工资：7900.0</p><p>员工工资总和：23700</p><p>员工工资所有统计：DoubleSummaryStatistics{count=3, sum=23700.000000,min=7000.000000, average=7900.000000, max=8900.000000}</p></blockquote><h4 id="分组-partitioningBy-groupingBy"><a href="#分组-partitioningBy-groupingBy" class="headerlink" title="分组(partitioningBy/groupingBy)"></a>分组(partitioningBy/groupingBy)</h4><ol><li>分区：将stream按条件分为两个Map，比如员工按薪资是否高于8000分为两部分。</li><li>分组：将集合分为多个Map，比如员工按性别分组。有单级分组和多级分组。</li></ol><p>案例：将员工按薪资是否高于8000分为两部分；将员工按性别和地区分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Anni&quot;, 8200, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Owen&quot;, 9500, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Alisa&quot;, 7900, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line"></span><br><span class="line">// 将员工按薪资是否高于8000分组</span><br><span class="line">        Map&lt;Boolean, List&lt;Person&gt;&gt; part = personList.stream().collect(Collectors.partitioningBy(x -&gt; x.getSalary() &gt; 8000));</span><br><span class="line">        // 将员工按性别分组</span><br><span class="line">        Map&lt;String, List&lt;Person&gt;&gt; group = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class="line">        // 将员工先按性别分组，再按地区分组</span><br><span class="line">        Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));</span><br><span class="line">        System.out.println(&quot;员工按薪资是否大于8000分组情况：&quot; + part);</span><br><span class="line">        System.out.println(&quot;员工按性别分组情况：&quot; + group);</span><br><span class="line">        System.out.println(&quot;员工按性别、地区：&quot; + group2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>员工按薪资是否大于8000分组情况：{false=[mutest.Person@2d98a335, mutest.Person@16b98e56, mutest.Person@7ef20235], true=[mutest.Person@27d6c5e0, mutest.Person@4f3f5b24, mutest.Person@15aeb7ab]}</p><p>员工按性别分组情况：{female=[mutest.Person@16b98e56, mutest.Person@4f3f5b24, mutest.Person@7ef20235], male=[mutest.Person@27d6c5e0, mutest.Person@2d98a335, mutest.Person@15aeb7ab]}</p><p>员工按性别、地区：{female={New York=[mutest.Person@4f3f5b24, mutest.Person@7ef20235], Washington=[mutest.Person@16b98e56]}, male={New York=[mutest.Person@27d6c5e0, mutest.Person@15aeb7ab], Washington=[mutest.Person@2d98a335]}}</p></blockquote><h4 id="接合-joining"><a href="#接合-joining" class="headerlink" title="接合(joining)"></a>接合(joining)</h4><p>joining可以将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line"></span><br><span class="line">String names = personList.stream().map(p -&gt; p.getName()).collect(Collectors.joining(&quot;,&quot;));</span><br><span class="line">System.out.println(&quot;所有员工的姓名：&quot; + names);</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;);</span><br><span class="line">String string = list.stream().collect(Collectors.joining(&quot;-&quot;));</span><br><span class="line">System.out.println(&quot;拼接后的字符串：&quot; + string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>所有员工的姓名：Tom,Jack,Lily</p><p>拼接后的字符串：A-B-C</p></blockquote><h4 id="归约-reducing"><a href="#归约-reducing" class="headerlink" title="归约(reducing)"></a>归约(reducing)</h4><p>Collectors类提供的reducing方法，相比于stream本身的reduce方法，增加了对自定义归约的支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));</span><br><span class="line"></span><br><span class="line">// 每个员工减去起征点后的薪资之和（这个例子并不严谨，但一时没想到好的例子）</span><br><span class="line">Integer sum = personList.stream().collect(Collectors.reducing(0, Person::getSalary, (i, j) -&gt; (i + j - 5000)));</span><br><span class="line">System.out.println(&quot;员工扣税薪资总和：&quot; + sum);</span><br><span class="line"></span><br><span class="line">// stream的reduce</span><br><span class="line">Optional&lt;Integer&gt; sum2 = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line">System.out.println(&quot;员工薪资总和：&quot; + sum2.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>员工扣税薪资总和：8700</p><p>员工薪资总和：23700</p></blockquote><h3 id="排序-sorted"><a href="#排序-sorted" class="headerlink" title="排序(sorted)"></a>排序(sorted)</h3><p>sorted，中间操作。有两种排序：</p><ol><li>sorted()：自然排序，流中元素需实现Comparable接口</li><li>sorted(Comparator com)：Comparator排序器自定义排序</li></ol><p>案例：将员工按工资由高到低（工资一样则按年龄由大到小）排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</span><br><span class="line"></span><br><span class="line">personList.add(new Person(&quot;Sherry&quot;, 9000, 24, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Tom&quot;, 8900, 22, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Jack&quot;, 9000, 25, &quot;male&quot;, &quot;Washington&quot;));</span><br><span class="line">personList.add(new Person(&quot;Lily&quot;, 8800, 26, &quot;male&quot;, &quot;New York&quot;));</span><br><span class="line">personList.add(new Person(&quot;Alisa&quot;, 9000, 26, &quot;female&quot;, &quot;New York&quot;));</span><br><span class="line"></span><br><span class="line">// 按工资升序排序（自然排序）</span><br><span class="line">List&lt;String&gt; newList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).map(Person::getName)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">// 按工资倒序排序</span><br><span class="line">List&lt;String&gt; newList2 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())</span><br><span class="line">.map(Person::getName).collect(Collectors.toList());</span><br><span class="line">// 先按工资再按年龄升序排序</span><br><span class="line">List&lt;String&gt; newList3 = personList.stream()</span><br><span class="line">.sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge)).map(Person::getName)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">// 先按工资再按年龄自定义排序（降序）</span><br><span class="line">List&lt;String&gt; newList4 = personList.stream().sorted((p1, p2) -&gt; &#123;</span><br><span class="line">if (p1.getSalary() == p2.getSalary()) &#123;</span><br><span class="line">return p2.getAge() - p1.getAge();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return p2.getSalary() - p1.getSalary();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).map(Person::getName).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;按工资升序排序：&quot; + newList);</span><br><span class="line">System.out.println(&quot;按工资降序排序：&quot; + newList2);</span><br><span class="line">System.out.println(&quot;先按工资再按年龄升序排序：&quot; + newList3);</span><br><span class="line">System.out.println(&quot;先按工资再按年龄自定义降序排序：&quot; + newList4);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>按工资升序排序：[Lily, Tom, Sherry, Jack, Alisa]</p><p>按工资降序排序：[Sherry, Jack, Alisa, Tom, Lily]</p><p>先按工资再按年龄升序排序：[Lily, Tom, Sherry, Jack, Alisa]</p><p>先按工资再按年龄自定义降序排序：[Alisa, Jack, Sherry, Tom, Lily]</p></blockquote><h3 id="提取-组合"><a href="#提取-组合" class="headerlink" title="提取/组合"></a>提取/组合</h3><p>流也可以进行合并、去重、限制、跳过等操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String[] arr1 = &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; &#125;;</span><br><span class="line">String[] arr2 = &#123; &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; &#125;;</span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; stream1 = Stream.of(arr1);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.of(arr2);</span><br><span class="line">// concat:合并两个流 distinct：去重</span><br><span class="line">List&lt;String&gt; newList = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br><span class="line">// limit：限制从流中获得前n个数据</span><br><span class="line">List&lt;Integer&gt; collect = Stream.iterate(1, x -&gt; x + 2).limit(10).collect(Collectors.toList());</span><br><span class="line">// skip：跳过前n个数据</span><br><span class="line">List&lt;Integer&gt; collect2 = Stream.iterate(1, x -&gt; x + 2).skip(1).limit(5).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;流合并：&quot; + newList);</span><br><span class="line">System.out.println(&quot;limit：&quot; + collect);</span><br><span class="line">System.out.println(&quot;skip：&quot; + collect2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>流合并：[a, b, c, d, e, f, g]</p><p>limit：[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]</p><p>skip：[3, 5, 7, 9, 11]</p></blockquote><hr><p>转载自 <a href="https://blog.csdn.net/mu_wind/article/details/109516995">https://blog.csdn.net/mu_wind/article/details/109516995</a></p><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;功能全景&quot;&gt;&lt;a href=&quot;#功能全景&quot; class=&quot;headerlink&quot; title=&quot;功能全景&quot;&gt;&lt;/a&gt;功能全景&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/java-stream-1.png&quot; alt=&quot;Java8Stream全景&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="转载" scheme="http://www.wujianjun.org/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>podman系列之ubuntu下podman环境搭建</title>
    <link href="http://www.wujianjun.org/2021/09/03/podman-env-install/"/>
    <id>http://www.wujianjun.org/2021/09/03/podman-env-install/</id>
    <published>2021-09-03T14:33:31.000Z</published>
    <updated>2021-09-27T03:46:41.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux环境信息"><a href="#Linux环境信息" class="headerlink" title="Linux环境信息"></a>Linux环境信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ cat /etc/os-release</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;20.04.3 LTS (Focal Fossa)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 20.04.3 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;20.04&quot;</span><br><span class="line">HOME_URL=&quot;https://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span><br><span class="line">VERSION_CODENAME=focal</span><br><span class="line">UBUNTU_CODENAME=focal</span><br></pre></td></tr></table></figure><h2 id="安装podman"><a href="#安装podman" class="headerlink" title="安装podman"></a>安装podman</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ echo &quot;deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /&quot; | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list</span><br><span class="line">wujianjun@wujianjun-work:~$ curl -L &quot;https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key&quot; | sudo apt-key add -</span><br><span class="line">wujianjun@wujianjun-work:~$ sudo apt update</span><br><span class="line">wujianjun@wujianjun-work:~$ sudo apt -y upgrade</span><br><span class="line">wujianjun@wujianjun-work:~$ sudo apt -y install podman</span><br></pre></td></tr></table></figure><p>速度有点慢。。。</p><h2 id="设置国内镜像源"><a href="#设置国内镜像源" class="headerlink" title="设置国内镜像源"></a>设置国内镜像源</h2><p>由于访问速度慢，可为默认的docker.io添加加速镜像（如果后续自己搭建私服，可将镜像地址设置为私服，则每次pull时会将镜像在私服上保存一份）。<br>详细配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ vi /etc/containers/registries.conf 后面增加</span><br><span class="line">`</span><br><span class="line">[[registry]]</span><br><span class="line">prefix = &quot;docker.io&quot; #需要加速的镜像地址</span><br><span class="line">location = &quot;hub-mirror.c.163.com&quot; #加速器地址，可以为私服地址</span><br><span class="line">insecure = true #支持加速器地址使用http进行访问</span><br><span class="line">`</span><br><span class="line">wujianjun@wujianjun-work:~$ sudo systemctl restart podman</span><br></pre></td></tr></table></figure><h2 id="开机自己podman"><a href="#开机自己podman" class="headerlink" title="开机自己podman"></a>开机自己podman</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ sudo systemctl start podman</span><br></pre></td></tr></table></figure><h2 id="验证安装版本"><a href="#验证安装版本" class="headerlink" title="验证安装版本"></a>验证安装版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ podman version</span><br><span class="line">Version:      3.2.3</span><br><span class="line">API Version:  3.2.3</span><br><span class="line">Go Version:   go1.15.2</span><br><span class="line">Built:        Thu Jan  1 00:00:00 1970</span><br><span class="line">OS/Arch:      linux/amd64</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux环境信息&quot;&gt;&lt;a href=&quot;#Linux环境信息&quot; class=&quot;headerlink&quot; title=&quot;Linux环境信息&quot;&gt;&lt;/a&gt;Linux环境信息&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="podman" scheme="http://www.wujianjun.org/tags/podman/"/>
    
  </entry>
  
  <entry>
    <title>内网linux远程访问</title>
    <link href="http://www.wujianjun.org/2021/09/02/linux-remote/"/>
    <id>http://www.wujianjun.org/2021/09/02/linux-remote/</id>
    <published>2021-09-02T11:09:51.000Z</published>
    <updated>2021-09-02T11:33:21.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开通ssh远程端口"><a href="#开通ssh远程端口" class="headerlink" title="开通ssh远程端口"></a>开通ssh远程端口</h2><p>通过外网做端口映射出ssh端口(22)之后，通过外网IP进行访问</p><h2 id="安装vpn"><a href="#安装vpn" class="headerlink" title="安装vpn"></a>安装vpn</h2><p>利用vpn软件远程登录进内网进行内网linux的访问</p><h2 id="内网找一台电脑安装软件（如：向日葵、TeamViewer等）"><a href="#内网找一台电脑安装软件（如：向日葵、TeamViewer等）" class="headerlink" title="内网找一台电脑安装软件（如：向日葵、TeamViewer等）"></a>内网找一台电脑安装软件（如：向日葵、TeamViewer等）</h2><h2 id="安装cockpit"><a href="#安装cockpit" class="headerlink" title="安装cockpit"></a>安装cockpit</h2><p>Cockpit是一个Web端的系统管理工具。Cockpit使用系统上已经存在的API。可以在Web界面管理服务、容器、存储等等，还可以配置网络、检查日志都非常方便。</p><p>由于22端口映射过于敏感，可以在内网linux上安装cockpit后，然后再做外网映射（默认9090）映射完成后，则可通过浏览器使用linux登录用户进行登录访问。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>CentOS</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ sudo yum install cockpit</span><br></pre></td></tr></table></figure><p><code>Ubuntu</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ sudo apt install cockpit</span><br></pre></td></tr></table></figure><h3 id="端口更改"><a href="#端口更改" class="headerlink" title="端口更改"></a>端口更改</h3><p>默认端口为9090，如果遇上端口冲突可按以下方式进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wujianjun@wujianjun-work:~$ sudo vi /etc/systemd/system/sockets.target.wants/cockpit.socket #更改ListenStream后的端口号</span><br><span class="line">wujianjun@wujianjun-work:~$ sudo systemctl restart cockpit.socket</span><br><span class="line">wujianjun@wujianjun-work:~$ sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;开通ssh远程端口&quot;&gt;&lt;a href=&quot;#开通ssh远程端口&quot; class=&quot;headerlink&quot; title=&quot;开通ssh远程端口&quot;&gt;&lt;/a&gt;开通ssh远程端口&lt;/h2&gt;&lt;p&gt;通过外网做端口映射出ssh端口(22)之后，通过外网IP进行访问&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>FindbugsMaven插件集成生成html报告</title>
    <link href="http://www.wujianjun.org/2021/09/02/code-findbugs-plugin/"/>
    <id>http://www.wujianjun.org/2021/09/02/code-findbugs-plugin/</id>
    <published>2021-09-02T07:09:40.000Z</published>
    <updated>2021-09-02T07:16:13.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h2><p>在pom.xml中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;reporting&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.0.5&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;effort&gt;Max&lt;/effort&gt;</span><br><span class="line">            &lt;threshold&gt;High&lt;/threshold&gt;</span><br><span class="line">            &lt;xmlOutput&gt;false&lt;/xmlOutput&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">  &lt;/plugins&gt;</span><br><span class="line">&lt;/reporting&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.9.1&lt;/version&gt;</span><br><span class="line">      &lt;dependencies&gt;</span><br><span class="line">          &lt;dependency&gt;</span><br><span class="line">              &lt;groupId&gt;org.apache.maven.doxia&lt;/groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;doxia-site-renderer&lt;/artifactId&gt;</span><br><span class="line">              &lt;version&gt;1.10&lt;/version&gt;</span><br><span class="line">          &lt;/dependency&gt;</span><br><span class="line">      &lt;/dependencies&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在pom.xml所在目录执行<code>mvn compile site</code>生成报告<br>在target/site目录中则能查看到扫描报告</p><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;maven配置&quot;&gt;&lt;a href=&quot;#maven配置&quot; class=&quot;headerlink&quot; title=&quot;maven配置&quot;&gt;&lt;/a&gt;maven配置&lt;/h2&gt;&lt;p&gt;在pom.xml中加入&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>运营之活动策划</title>
    <link href="http://www.wujianjun.org/2021/08/28/bussiness-market-plan/"/>
    <id>http://www.wujianjun.org/2021/08/28/bussiness-market-plan/</id>
    <published>2021-08-28T00:57:29.000Z</published>
    <updated>2021-09-01T02:09:45.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运营之活动策划"><a href="#运营之活动策划" class="headerlink" title="运营之活动策划"></a>运营之活动策划</h2><p>日常活动（提升UV、拉新）</p><ul><li>签到</li><li>0点、10点、15点限时兑换、限时秒杀</li><li>抽奖</li><li>会员日专属福利</li><li>邀请码</li><li>虚拟宝贝养成计划<br>业务事件活动（提升复购率）</li><li>消费即返券、消费即返积分</li><li>按消费习惯进行个性推荐<br>热点事件活动（提升UV）</li><li>周年庆</li><li>有奖竞猜</li><li>事件评论、事件转发</li><li>节日</li></ul><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;运营之活动策划&quot;&gt;&lt;a href=&quot;#运营之活动策划&quot; class=&quot;headerlink&quot; title=&quot;运营之活动策划&quot;&gt;&lt;/a&gt;运营之活动策划&lt;/h2&gt;&lt;p&gt;日常活动（提升UV、拉新）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;签到&lt;/li&gt;
&lt;li&gt;0点、10点、15点限</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>业务运营之运营指标</title>
    <link href="http://www.wujianjun.org/2021/08/26/bussiness-operate-target/"/>
    <id>http://www.wujianjun.org/2021/08/26/bussiness-operate-target/</id>
    <published>2021-08-26T13:04:02.000Z</published>
    <updated>2021-09-01T02:12:45.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务运营之运营指标"><a href="#业务运营之运营指标" class="headerlink" title="业务运营之运营指标"></a>业务运营之运营指标</h2><ol><li>用户获取</li></ol><ul><li>渠道到达量（曝光量）</li><li>渠道转化率（CPM，CPC，CPS，CPD，CPT等）</li><li>渠道ROI</li><li>日应用下载量</li><li>日新增用户数</li><li>用户获客成本（CAC）</li><li>一次会话用户数</li></ul><ol start="2"><li>用户活跃</li></ol><ul><li>活跃用户（DAU、WAU、MAU）</li><li>PV和UV</li><li>用户会话次数</li><li>用户访问时长</li><li>功能使用率</li></ul><ol start="3"><li>用户留存</li></ol><ul><li>留存率</li><li>用户流失率</li><li>退出率</li></ul><ol start="4"><li>营销</li></ol><ul><li>用户生命周期</li><li>用户生命周期价值</li><li>客户/用户忠诚指数</li><li>客户/用户流失指数</li><li>客户/用户价值指数（RMF模型和PCA模型）</li></ul><ol start="5"><li>传播/活动</li></ol><ul><li>K因子</li><li>病毒传播周期</li><li>用户分享率</li><li>活动曝光量/浏览量</li><li>活动参与率</li></ul><ol start="6"><li>营收</li></ol><ul><li>活跃交易用户数</li><li>GMV</li><li>客单价</li><li>复购率</li><li>退货率</li></ul><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;业务运营之运营指标&quot;&gt;&lt;a href=&quot;#业务运营之运营指标&quot; class=&quot;headerlink&quot; title=&quot;业务运营之运营指标&quot;&gt;&lt;/a&gt;业务运营之运营指标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用户获取&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;渠道到达量（曝光量）&lt;</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>业务运营之会员制</title>
    <link href="http://www.wujianjun.org/2021/08/26/bussiness-operate/"/>
    <id>http://www.wujianjun.org/2021/08/26/bussiness-operate/</id>
    <published>2021-08-26T13:04:02.000Z</published>
    <updated>2021-09-01T02:12:41.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务运营之会员制"><a href="#业务运营之会员制" class="headerlink" title="业务运营之会员制"></a>业务运营之会员制</h2><ul><li>付费会员：通过将一整年的权益打包，一次性付费的形式，锁定客户的长期价值。而后续的续费率/复购率则需要企业通过优质的服务+产品来确保。如：京东plus会员、盒马X会员、视频网站会员。</li><li>成长型会员：客户达到一定的消费金额或消费次数，即可升级会员等级，并享受相应的等级权益。如：星巴克会员</li><li>储值会员：预充值会员，一次性充值一定的金额，享受会员权益。如：每周领购物券、会员日、商品以会员价/非会员价进行销售。</li></ul><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;业务运营之会员制&quot;&gt;&lt;a href=&quot;#业务运营之会员制&quot; class=&quot;headerlink&quot; title=&quot;业务运营之会员制&quot;&gt;&lt;/a&gt;业务运营之会员制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;付费会员：通过将一整年的权益打包，一次性付费的形式，锁定客户的长期价值。而后续的</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>系统组成部分</title>
    <link href="http://www.wujianjun.org/2021/08/26/system-main-fn/"/>
    <id>http://www.wujianjun.org/2021/08/26/system-main-fn/</id>
    <published>2021-08-26T02:10:29.000Z</published>
    <updated>2021-09-01T02:11:45.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心主线功能"><a href="#核心主线功能" class="headerlink" title="核心主线功能"></a>核心主线功能</h2><ul><li>会员端功能、管理端、运营端的业务功能</li><li>远程化、便捷化、数据化<h2 id="会员体系"><a href="#会员体系" class="headerlink" title="会员体系"></a>会员体系</h2></li><li>会员星级</li><li>会员权益<h2 id="金融体系"><a href="#金融体系" class="headerlink" title="金融体系"></a>金融体系</h2></li><li>钱包、充值、消费、即时支付</li><li>对帐、报表、发票、退款<h2 id="物流体系"><a href="#物流体系" class="headerlink" title="物流体系"></a>物流体系</h2></li><li>取货：快捷高效、不掉包、不破损、透明</li><li>处理</li><li>送货：快捷、准确、透明<h2 id="库存体系"><a href="#库存体系" class="headerlink" title="库存体系"></a>库存体系</h2></li><li>进出库、盘点、预警</li><li>对帐<h2 id="营销体系"><a href="#营销体系" class="headerlink" title="营销体系"></a>营销体系</h2></li><li>日常活动</li><li>基于业务事件活动</li><li>基于热点事件营销<h2 id="积分体系"><a href="#积分体系" class="headerlink" title="积分体系"></a>积分体系</h2></li><li>增长方式、消耗方式、衰减方式<h2 id="业态联合"><a href="#业态联合" class="headerlink" title="业态联合"></a>业态联合</h2></li><li>商城</li><li>广告</li><li>权益互换<h2 id="智能化"><a href="#智能化" class="headerlink" title="智能化"></a>智能化</h2></li><li>无接触交易</li><li>上门取送<h2 id="数字化"><a href="#数字化" class="headerlink" title="数字化"></a>数字化</h2></li><li>会员画像、员工画像、物体画像</li><li>库存预测、价格波动预测</li><li>数字孪生</li></ul><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;核心主线功能&quot;&gt;&lt;a href=&quot;#核心主线功能&quot; class=&quot;headerlink&quot; title=&quot;核心主线功能&quot;&gt;&lt;/a&gt;核心主线功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;会员端功能、管理端、运营端的业务功能&lt;/li&gt;
&lt;li&gt;远程化、便捷化、数据化&lt;h2 id=&quot;会</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>Linux定时任务之crontab</title>
    <link href="http://www.wujianjun.org/2021/07/30/linux-crontab/"/>
    <id>http://www.wujianjun.org/2021/07/30/linux-crontab/</id>
    <published>2021-07-30T04:01:55.000Z</published>
    <updated>2021-09-01T02:03:15.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux定时任务"><a href="#Linux定时任务" class="headerlink" title="Linux定时任务"></a>Linux定时任务</h2><ul><li> 列出当前用户签定的任务： # crontab -l</li><li> 删除当前用户签定的任务： # crontab -r</li><li> 编辑用户个人的计划任务： # crontab -e<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># m h  dom mon dow   command m:分钟，0-59，每分钟可以用 * 或 */1 表示，每5分钟用 */5 表示 h:小时，0-23 dom:日期，1-31</span><br><span class="line">mon:月份，1-12 dow:星期，0-7，其中0、7都是代表星期天 command:需要执行的命令</span><br></pre></td></tr></table></figure>示例： */30 * * * * echo ‘hello’ 每 30 分钟输出hello<br>30 * * * *  echo ‘hello’ 每小时的 30 分钟（间隔1小时）输出hello<br>30 1-3 * * *  echo ‘hello’ 每日 1:00-3:00 之间的 30 分钟（即1:30、2:30、3:30）输出hello</li></ul><p>*/30 1-3 * * *  echo ‘hello’ 每日 1:00-3:00 之间每隔 30 分钟输出hello<br>30 3 * * *  echo ‘hello’ 每日 3:30 输出hello<br>30 3 1,5,9 * *  echo ‘hello’ 每月1、5、9日 3:30 输出hello<br>30 3 1,5,9 1 *  echo ‘hello’ 每年1月1、5、9日 3:30 输出hello<br>30 3 * * 0,6  echo ‘hello’ 每星期六、日 3:30 输出hello</p><ul><li>编辑系统计划任务： # vi /etc/crontab<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># m h dom mon dow user  command</span><br><span class="line">m:分钟，0-59，每分钟可以用 * 或 */1 表示，每5分钟用 */5 表示 h:小时，0-23 dom:日期，1-31</span><br><span class="line">mon:月份，1-12 dow:星期，0-7，其中0、7都是代表星期天</span><br><span class="line">user: 指定用户名 command:需要执行的命令</span><br></pre></td></tr></table></figure>示例：</li></ul><p>*/10 * * * * root /usr/local/demo.sh<br>每 10 分钟以 root 身份执行 /usr/local/demo.sh 这个脚本。</p><ul><li>开启运行日志：#vi /etc/rsyslog.d/50-default.conf &amp;&amp; sudo systemctl restart rsyslog.service<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/cron.log</span><br></pre></td></tr></table></figure></li></ul><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux定时任务&quot;&gt;&lt;a href=&quot;#Linux定时任务&quot; class=&quot;headerlink&quot; title=&quot;Linux定时任务&quot;&gt;&lt;/a&gt;Linux定时任务&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt; 列出当前用户签定的任务： # crontab -l&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>大数据之数据治理</title>
    <link href="http://www.wujianjun.org/2021/07/04/bigdata-data-governance/"/>
    <id>http://www.wujianjun.org/2021/07/04/bigdata-data-governance/</id>
    <published>2021-07-04T03:59:42.000Z</published>
    <updated>2021-09-01T02:01:15.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据集成平台："><a href="#数据集成平台：" class="headerlink" title="数据集成平台："></a>数据集成平台：</h2><ol><li>组成：数据汇集、数据集成、数据安全守护、离线调度、数据共享</li><li>特点：</li></ol><ul><li>多样化汇集方式</li><li>结构化半结构化非结构化数据汇集与集成</li><li>高数据汇集实时性</li><li>多样的集成算法</li><li>高效的全流程监控的调度</li><li>多样的数据实时非实时共享方式</li></ul><h2 id="数据管理平台："><a href="#数据管理平台：" class="headerlink" title="数据管理平台："></a>数据管理平台：</h2><ol><li>组成：元数据管理、数据建模、主数据管理、数据标准、数据标签、数据安全审计、数据质量评估</li><li>特点：</li></ol><ul><li>多源异构管理数据源</li><li>高效全面读取元数据</li><li>元数据变更管理</li><li>全面真实的元数据全链</li><li>异构数据源数据模型转换</li><li>权威可行的数据标准（本地、国标、行标）管理与应用</li><li>业务贴合紧密的数据标签体系</li><li>元数据设定安全规则管控与授权，保障数据的安全访问和更新</li><li>源数据及数仓数据的全链校验，识别源头问题和数据集成期问题</li></ul><h2 id="数据运维平台："><a href="#数据运维平台：" class="headerlink" title="数据运维平台："></a>数据运维平台：</h2><ol><li>组成：安装部署、日常巡检、软硬件及业务监控、主被动告警通知、动态伸缩集群、日志审计</li><li>特点：</li></ol><ul><li>监控指标丰富可插拔</li><li>业务解耦，保持独立性</li><li>WebSSH</li></ul><h2 id="数据运营平台："><a href="#数据运营平台：" class="headerlink" title="数据运营平台："></a>数据运营平台：</h2><ol><li>组成：统一认证中心. 组织机构管理、用户帐户管理、角色授权管理</li><li>特点：</li></ol><ul><li>标准接口开放与对接，如oauth2</li><li>高效稳定的数据接口</li><li>灵活可扩展</li></ul><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据集成平台：&quot;&gt;&lt;a href=&quot;#数据集成平台：&quot; class=&quot;headerlink&quot; title=&quot;数据集成平台：&quot;&gt;&lt;/a&gt;数据集成平台：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;组成：数据汇集、数据集成、数据安全守护、离线调度、数据共享&lt;/li&gt;
&lt;li&gt;特点：&lt;/</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="大数据" scheme="http://www.wujianjun.org/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库</title>
    <link href="http://www.wujianjun.org/2021/03/31/data-wh/"/>
    <id>http://www.wujianjun.org/2021/03/31/data-wh/</id>
    <published>2021-03-31T01:57:16.000Z</published>
    <updated>2021-09-01T01:59:14.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h2><ul><li>归集库：从委办局接入数据1：1的建表进行数据归集。</li><li>标准层：将归集表结构与数据标签进行映射后转换。</li><li>基础层：与标准层1比1建表。（是否有必要）</li><li>基础库：通过标准层（基础层）进行去重后的数据落入基础库，表结构与标准层（基础层）1：1。</li><li>主题库：按需要提供出去数据的需求清单建立大宽表主题表，通过基础库进行合表、清洗、拆表后落入数据。</li><li>共享库：以主题库数据形成共享库，对智慧应用提供数据服务</li></ul><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据仓库&quot;&gt;&lt;a href=&quot;#数据仓库&quot; class=&quot;headerlink&quot; title=&quot;数据仓库&quot;&gt;&lt;/a&gt;数据仓库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;归集库：从委办局接入数据1：1的建表进行数据归集。&lt;/li&gt;
&lt;li&gt;标准层：将归集表结构与数据标签进行映射后转</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="大数据" scheme="http://www.wujianjun.org/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>科技公司</title>
    <link href="http://www.wujianjun.org/2020/11/02/tech-company/"/>
    <id>http://www.wujianjun.org/2020/11/02/tech-company/</id>
    <published>2020-11-02T06:55:47.000Z</published>
    <updated>2021-09-01T01:57:06.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><p>「科技公司」这个概念在今天已经变得有些泛滥，但回归到本质，它的底色应该是技术。而一家公司是否能被称为「科技公司」，最简单的判断应该是：它是否以技术解决了实际的问题、推动了商业或社会的进步。– from洪偌馨</p><p>「科技公司」定义标准：</p><ul><li>软件能够创造一个生态系统</li><li>软件的边际成本为零</li><li>软件随着时间的推移而不断改进</li><li>软件能无限扩展（offers infinite leverage）</li><li>软件能实现交易成本为零</li></ul><p>推进策略：<br>拥抱变化，小步快跑，快速响应，快速迭代，谦虚心态，不断总结</p><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章内容&quot;&gt;&lt;a href=&quot;#文章内容&quot; class=&quot;headerlink&quot; title=&quot;文章内容&quot;&gt;&lt;/a&gt;文章内容&lt;/h2&gt;&lt;p&gt;「科技公司」这个概念在今天已经变得有些泛滥，但回归到本质，它的底色应该是技术。而一家公司是否能被称为「科技公司」，最简单的判</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>产品需求来源</title>
    <link href="http://www.wujianjun.org/2020/06/08/demand-source/"/>
    <id>http://www.wujianjun.org/2020/06/08/demand-source/</id>
    <published>2020-06-08T00:48:36.000Z</published>
    <updated>2021-09-01T01:49:12.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产品需求来源"><a href="#产品需求来源" class="headerlink" title="产品需求来源"></a>产品需求来源</h2><ul><li>产品理念和战略方向</li><li>竞标方案</li><li>市场反馈&amp;一线用户优化建议</li><li>行业标准</li><li>竞品分析(注意得符合产品定位和方向)</li><li>运营团队运营策略的演进</li><li>技术指标和架构设计的优化提升</li></ul><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;产品需求来源&quot;&gt;&lt;a href=&quot;#产品需求来源&quot; class=&quot;headerlink&quot; title=&quot;产品需求来源&quot;&gt;&lt;/a&gt;产品需求来源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;产品理念和战略方向&lt;/li&gt;
&lt;li&gt;竞标方案&lt;/li&gt;
&lt;li&gt;市场反馈&amp;amp;一线用户优化</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>架构优化</title>
    <link href="http://www.wujianjun.org/2020/06/01/architecture-optimize/"/>
    <id>http://www.wujianjun.org/2020/06/01/architecture-optimize/</id>
    <published>2020-06-01T00:34:27.000Z</published>
    <updated>2021-09-01T01:54:40.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务架构优化"><a href="#业务架构优化" class="headerlink" title="业务架构优化"></a>业务架构优化</h2><p>复杂的事情简单化，简单的事情标准化，标准的事情流程化，流程的事情自动化，自动的事情智能化。</p><h2 id="性能优化十大策略"><a href="#性能优化十大策略" class="headerlink" title="性能优化十大策略"></a>性能优化十大策略</h2><p><img src="/images/performance-optimize.jpg" alt="性能优化十大策略"></p><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;业务架构优化&quot;&gt;&lt;a href=&quot;#业务架构优化&quot; class=&quot;headerlink&quot; title=&quot;业务架构优化&quot;&gt;&lt;/a&gt;业务架构优化&lt;/h2&gt;&lt;p&gt;复杂的事情简单化，简单的事情标准化，标准的事情流程化，流程的事情自动化，自动的事情智能化。&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="转载" scheme="http://www.wujianjun.org/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>nginx日志打印详解</title>
    <link href="http://www.wujianjun.org/2020/05/04/nginx-log-config/"/>
    <id>http://www.wujianjun.org/2020/05/04/nginx-log-config/</id>
    <published>2020-05-04T02:18:42.000Z</published>
    <updated>2021-09-01T01:40:17.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format  access  &#x27;$remote_addr - $remote_user [$time_local] [$msec] [$request_time] [$http_host] &quot;$request&quot; &#x27;</span><br><span class="line">                          &#x27;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &#x27;</span><br><span class="line">                          &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br></pre></td></tr></table></figure><p>$remote_addr  客户端IP地址<br>$remote_user   客户端用户<br>$time_local   访问时间与时区<br>$msec   访问时间与时区字符串形式<br>$request_time  请求开始到返回时间<br>$http_host   请求域名<br>$request   请求的url与http协议<br>$status    请求状态,如成功200<br>$body_bytes_sent    记录发送给客户端文件主体内容大小<br>$request_body   访问url时参数<br>$http_referer     记录从那个页面链接访问过来的<br>$http_user_agent    记录客户浏览器的相关信息<br>$http_x_forwarded_for  请求转发f过来的地址<br>$upstream_response_time:从 Nginx 建立连接 到 接收完数据并关闭连接</p><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章内容&quot;&gt;&lt;a href=&quot;#文章内容&quot; class=&quot;headerlink&quot; title=&quot;文章内容&quot;&gt;&lt;/a&gt;文章内容&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>springcloud各组件目标</title>
    <link href="http://www.wujianjun.org/2019/01/14/springcloud-step1/"/>
    <id>http://www.wujianjun.org/2019/01/14/springcloud-step1/</id>
    <published>2019-01-14T10:42:37.000Z</published>
    <updated>2021-08-31T14:23:11.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件架构发展史"><a href="#软件架构发展史" class="headerlink" title="软件架构发展史"></a>软件架构发展史</h2><p>1、单体架构<br>部署形式：一个应用、一个DB、一个WebServer<br>优点：快速、灵活、技术要求低<br>缺点：升级迭代难、业务支撑能力弱、部署扩展性差</p><p>2、SOA<br>部署形式：多个分布式应用集群部署、统一DB/按业务拆分DB、多个WebServer<br>优点：业务模块内部高内聚，业务模块之间低耦合、业务模块目标清晰、模块升级服务独立、针对业务洪峰可通过水平扩展来支撑<br>缺点：ESB（企业服务总线）职责过多（职责：统一服务管理、协议转换、消息转换、消息路由服务监控等）</p><p>3、微服务（比SOA组件化和服务化更彻底）<br>部署形式：多个分布式应用集群部署、多个服务模块DB、多个WebServer<br>优点：在SOA优点之上增加开发语言和数据库类型的多样化支持、服务治理职责更为单一<br>缺点：事务问题成为必须要解决的问题、系统复杂度增高<br>与SOA区别：去掉ESB的大一统职责组件，将大一统职责组件进行拆分，组件职责进一步细化。</p><h2 id="springcloud组件"><a href="#springcloud组件" class="headerlink" title="springcloud组件"></a>springcloud组件</h2><ul><li><code>Eureka</code> 负责服务的注册与发现，很好将各服务连接起来。通过<code>feign</code>简化接口调用方式。</li><li><code>Hystrix</code> 负责监控服务之间的调用情况，连续多次失败进行熔断保护。</li><li><code>Hystrix dashboard+Turbine</code> 负责监控 Hystrix的熔断情况，并给予图形化的展示</li><li><code>Spring Cloud Config</code> 提供了统一的配置中心服务</li><li>当配置文件发生变化的时候，<code>Spring Cloud Bus</code> 负责通知各服务去获取最新的配置信息</li><li>所有对外的请求和服务，我们都通过<code>Spring Cloud Gateway</code>来进行转发，起到API网关的作用</li><li>监控我们使用<code>Sleuth+Zipkin+springAdmin</code>将所有的请求数据及路径记录下来</li></ul><h3 id="Eureka（服务中心）"><a href="#Eureka（服务中心）" class="headerlink" title="Eureka（服务中心）"></a>Eureka（服务中心）</h3><p>Eureka是Netflix开源的一款提供服务注册和发现的产品。完成服务注册、负载均衡和故障转移的功能。<br>依赖spring-cloud-starter-eureka<br>同质化产品：Consul、Feature、zookeeper、etcd等</p><h3 id="Feign（HTTP客户端）"><a href="#Feign（HTTP客户端）" class="headerlink" title="Feign（HTTP客户端）"></a>Feign（HTTP客户端）</h3><p>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。<br>依赖spring-cloud-starter-feign</p><h3 id="Hystrix（服务熔断-故障隔离）"><a href="#Hystrix（服务熔断-故障隔离）" class="headerlink" title="Hystrix（服务熔断/故障隔离）"></a>Hystrix（服务熔断/故障隔离）</h3><p>避免一个服务故障导致调用该服务的其它N个服务等待引起级联故障而造成服务雪崩（服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。）<br>针对故障服务Hystrix会间隔时间进行检查，如果服务恢复将继续提供服务。</p><h3 id="Hystrix-dashboard-Turbine-监控工具"><a href="#Hystrix-dashboard-Turbine-监控工具" class="headerlink" title="Hystrix-dashboard+Turbine (监控工具)"></a>Hystrix-dashboard+Turbine (监控工具)</h3><p>Hystrix-dashboard是针对Hystrix进行实时监控的管理工具，能展示Hystrix Command的请求响应时间, 请求成功率等数据。添加Turbine工具则能同时展示多个服务信息。</p><h3 id="Spring-Cloud-Config-配置中心"><a href="#Spring-Cloud-Config-配置中心" class="headerlink" title="Spring Cloud Config (配置中心)"></a>Spring Cloud Config (配置中心)</h3><p>将服务的配置信息服务化，通过Config Client连接到Config Server进行获取，通过手动Refresh可完成在服务的运行期间重新加载配置更新。</p><h3 id="Spring-Cloud-Bus（广播指令）"><a href="#Spring-Cloud-Bus（广播指令）" class="headerlink" title="Spring Cloud Bus（广播指令）"></a>Spring Cloud Bus（广播指令）</h3><p>Spring Cloud Bus通过轻量消息代理连接各个分布的服务节点。可通过它广播消息指令到任一服务节点。比如与Spring Cloud Config配合使用自动识别配置变化，可通过该组件通知服务节点自动Refresh完成配置的更新。</p><h3 id="Spring-Cloud-Gateway-服务网关"><a href="#Spring-Cloud-Gateway-服务网关" class="headerlink" title="Spring Cloud Gateway (服务网关)"></a>Spring Cloud Gateway (服务网关)</h3><p>基于SpringFramework5和SpringBoot2实现了动态路由、HTTP请求的路由匹配、过滤器可以修改下游HTTP请求和HTTP响应等功能。<br>同质化产品：Zuul、Linkerd等</p><h3 id="Spring-Cloud-Sleuth-Zipkin-springAdmin-（消息链路跟踪）"><a href="#Spring-Cloud-Sleuth-Zipkin-springAdmin-（消息链路跟踪）" class="headerlink" title="Spring Cloud Sleuth+Zipkin+springAdmin （消息链路跟踪）"></a>Spring Cloud Sleuth+Zipkin+springAdmin （消息链路跟踪）</h3><p>随着服务的越来越多，对调用链的分析会越来越复杂。系统的架构改进需要监控服务和服务之间通讯的各项指标达成情况如（服务间调用关系、调用链、各服务消耗时间等）。Zipkin是Twitter的一个开源项目，允许开发者收集 Twitter 各个服务上的监控数据，并提供查询接口。</p><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;软件架构发展史&quot;&gt;&lt;a href=&quot;#软件架构发展史&quot; class=&quot;headerlink&quot; title=&quot;软件架构发展史&quot;&gt;&lt;/a&gt;软件架构发展史&lt;/h2&gt;&lt;p&gt;1、单体架构&lt;br&gt;部署形式：一个应用、一个DB、一个WebServer&lt;br&gt;优点：快速、灵活、技</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="springcloud" scheme="http://www.wujianjun.org/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>软件测试点汇总</title>
    <link href="http://www.wujianjun.org/2019/01/08/software-test-point/"/>
    <id>http://www.wujianjun.org/2019/01/08/software-test-point/</id>
    <published>2019-01-08T09:06:36.000Z</published>
    <updated>2021-08-31T14:23:11.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="功能性测试"><a href="#功能性测试" class="headerlink" title="功能性测试"></a>功能性测试</h2><ol><li>需求功能完成度测试（业务逻辑、功能点等）</li><li>值类型测试</li><li>值乱码测试（特殊字符、表情符等）</li><li>值边界测试</li><li>关联功能测试</li><li>请求重复提交/请求中断测试（快速重复提交请求、发起请求后dismiss功能界面等）</li><li>运行速度测试（app启动、页面切换等）</li><li>程序异常测试</li><li>场景回滚测试</li></ol><h2 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h2><ol><li>不同设备兼容性（分辨率、设备品牌、设备ROM版本、不同ROM厂家、不同尺寸等）</li><li>不同app版本兼容性</li><li>网络兼容性（移动网络、不同运营商网络、WIFI、弱网、断网等）</li><li>第三方软件兼容性（输入法软件、蓝牙软件等）</li></ol><h2 id="升级测试"><a href="#升级测试" class="headerlink" title="升级测试"></a>升级测试</h2><ol><li>全新安装/卸载测试（apk安装/卸载、应用市场软件内安装/卸载等）</li><li>增量/全量升级测试（数字签名测试、跨版本升级等）</li><li>系统资源不足时测试（低电量、断电、硬盘空间不足、内存不足等）</li></ol><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><ol><li>数据正确性测试（按接口文档和数据库存储的数据进行计算后验证）</li><li>网络连通性（DNS异常、client断网、server端超时、server端异常、client签名证书异常等）</li><li>数据流量测试（是否有超大数据包传递等）</li><li>数据安全性（数据传输是否加密或混淆等）</li><li>调用方安全性（接口调用方是否鉴权、是否被模拟回调等）</li><li>系统时间篡改对功能的影响</li></ol><h2 id="UI测试"><a href="#UI测试" class="headerlink" title="UI测试"></a>UI测试</h2><ol><li>界面测试（UI布局、界面颜色、风格统一性、字体大小、提示文案位置、界面返回路径等）</li><li>内容测试（文案内容、错别字、版权、专利、隐私内容、敏感词、敏感图片等）</li><li>横竖屏切换、前后台切换等</li></ol><h2 id="交互测试"><a href="#交互测试" class="headerlink" title="交互测试"></a>交互测试</h2><ol><li>app中断测试（来电话、来短信、低电量、待机、插拔数据线、插拔耳机、断网、闹钟，日历提醒，蓝牙提醒等）</li><li>多个app争夺系统资源时对app的影响（声道播放、相机等）</li><li>用户打扰测试（push通知是否在免打扰时段内通知、push通知关闭状态下是否依然通知等）</li><li>长时间使用、长时间后台等</li><li>手势测试（单指滑动，单指单击，单指双击，单指长按，单指缩放，多指点击等）</li></ol><h2 id="缓存量测试"><a href="#缓存量测试" class="headerlink" title="缓存量测试"></a>缓存量测试</h2><ol><li>第一次使用时存入缓存大量数据对app的影响</li><li>日常使用时更新缓存大量数据对app的影响</li><li>重新安装保存原缓存的大量缓存数据更新对app的影响</li></ol><h2 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h2><ol><li>数据安全（是否加密传输、关键数据是否容易被篡改等）</li><li>证书安全（SSL证书、SSL密钥等）</li><li>临时目录数据、缓存数据是否安全存储不被恶意读取</li><li>软件权限安全性（扣费风险、隐私泄露风险、非法授权访问等）</li></ol><h2 id="性能测试（测试工具：LR、NeoLoad、ApacheBench、jmeter、http-load等）"><a href="#性能测试（测试工具：LR、NeoLoad、ApacheBench、jmeter、http-load等）" class="headerlink" title="性能测试（测试工具：LR、NeoLoad、ApacheBench、jmeter、http_load等）"></a>性能测试（测试工具：LR、NeoLoad、ApacheBench、jmeter、http_load等）</h2><ol><li>极限测试（在各种边界压力情况下，如电池、存储、网速等，验证App是否能正确响应）</li><li>响应能力测试（测试各功能的响应时间要求）</li><li>压力测试（反复/长期操作下、系统资源是否占用正常）</li></ol><h2 id="自动化测试（工具：Selenium、Appium、Watir、Katalon-Studio、Monkey-Test等）"><a href="#自动化测试（工具：Selenium、Appium、Watir、Katalon-Studio、Monkey-Test等）" class="headerlink" title="自动化测试（工具：Selenium、Appium、Watir、Katalon Studio、Monkey Test等）"></a>自动化测试（工具：Selenium、Appium、Watir、Katalon Studio、Monkey Test等）</h2><ol><li>通过编写语言脚本对功能或接口进行自动化调用，减少人力测试成本。</li></ol><hr><p><em>观点仅代表自己，期待你的留言。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;功能性测试&quot;&gt;&lt;a href=&quot;#功能性测试&quot; class=&quot;headerlink&quot; title=&quot;功能性测试&quot;&gt;&lt;/a&gt;功能性测试&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;需求功能完成度测试（业务逻辑、功能点等）&lt;/li&gt;
&lt;li&gt;值类型测试&lt;/li&gt;
&lt;li&gt;值乱码测试（特</summary>
      
    
    
    
    
    <category term="原创" scheme="http://www.wujianjun.org/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
</feed>
